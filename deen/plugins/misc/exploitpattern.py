## Best ever pull request! Traxes!

import sys
from string import ascii_uppercase, ascii_lowercase, digits

from .. import DeenPlugin

__all__ = ['DeenPluginCreatePattern',
           'DeenPluginFindPattern']

MAX_PATTERN_LENGTH = 20280

class DeenPluginCreatePattern(DeenPlugin):
    name = 'patternCreate'
    display_name = 'PatternCreate'
    cmd_name = 'patternCreate'
    cmd_help = 'Create a Pattern for exploit development!'

    def __init__(self):
        super(DeenPluginCreatePattern, self).__init__()

    def process(self, data):
        """
        Generate a pattern of a given length up to a maximum
        of 20280 - after this the pattern would repeat
        """
        super(DeenPluginCreatePattern, self).process(data)
        try:
            pattern = ''
            data = int(data)
            if data >= MAX_PATTERN_LENGTH:
                out = 'ERROR: Pattern length exceeds maximum of %d' % MAX_PATTERN_LENGTH  
                return out.encode()

            
            for upper in ascii_uppercase:
                for lower in ascii_lowercase:
                    for digit in digits:
                        if len(pattern) < data:
                            pattern += upper+lower+digit
                        else:
                            out = pattern[:data]
                            return out.encode()
        except ValueError as e:
            self.error = e
        return pattern.encode()


class DeenPluginFindPattern(DeenPlugin):
    name = 'patternFind'
    display_name = 'PatternFind'
    cmd_name = 'patternFind'
    cmd_help = 'Find position in pattern of data'

    def __init__(self):
        super(DeenPluginFindPattern, self).__init__()

    def process(self, data):
        """
        Search for search_pattern in pattern.  Convert from hex if needed
        Looking for needle in haystack
        """
        super(DeenPluginFindPattern, self).process(data)
        needle = data.decode("utf-8")
        try:
            try:
                if needle.startswith('0x'):
                    # Strip off '0x', convert to ASCII and reverse
                    needle = bytes.fromhex(needle[2:])
                    needle = needle[::-1].decode("utf-8")
            except ValueError as e:
                self.error = e
                return ('Unable to convert hex input:{}'.format(e)).encode()

            haystack = ''
            for upper in ascii_uppercase:
                for lower in ascii_lowercase:
                    for digit in digits:
                        haystack += upper+lower+digit
                        found_at = haystack.find(needle)
                        if found_at > -1:
                            return ('Pattern %s first occurrence at position %d in pattern.' % (data, found_at)).encode()

        except TypeError as e:
            self.error = e
            return "Invalid Input {}".format(e).encode()
        return ('Couldn`t find %s (%s) anywhere in the pattern.' % (data, needle)).encode()